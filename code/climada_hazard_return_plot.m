function fig = climada_hazard_return_plot(hazard,return_periods,check_plot,peril_ID)
% NAME:
%   climada_hazard_return_plot
% PURPOSE:
% CALLING SEQUENCE:
%   climada_hazard_return_plot(hazard,return_periods,check_plot,peril_ID,check_printplot)
% EXAMPLE:
% INPUTS:
%   none
% OPTIONAL INPUT PARAMETERS:
%   hazard: hazard structure, if not given, prompted for
%       generated by e.g. climada_tc_hazard_set
%   return_periods: vector containing the requested return periods
%       (e.g. [1 5 10 25 50 100 500 1000])
%       if empty, taken from default as defined in climada_init_vars
%   check_plot: default=1, draw the intensity maps for various return
%       periods. Set=0 to omit plot
%   peril_ID: if passed on, setting for colormap etc. used as for specificed peril
%       if hazard.peril_ID exists, this ID is used ('TC','WS','TR'...)
%       (TC: tropical cyclones, TS: storm surge, TR: torrential rain, WS: winter storm...)
%       Currently implemented: TC and TR
%       Otherwise, default settings are used.
%   check_printplot: if =1, user will be asked to generate a pdf, default=0
% OUTPUTS:
%   fig:    handle of plot
% MODIFICATION HISTORY:
% Gilles Stassen, gillesstassen@hotmail.com, 20150208
%-

% init global variables
global climada_global
if ~climada_init_vars, return; end

% poor man's version to check arguments
if ~exist('hazard'        , 'var'), hazard         = []; end
if ~exist('return_periods', 'var'), return_periods = []; end
if ~exist('check_plot'    , 'var'), check_plot     = 1 ; end
if ~exist('peril_ID'      , 'var'), peril_ID       = ''; end
if ~exist('check_printplot','var'), check_printplot= 0; end

% prompt for hazard if not given
if isempty(hazard) % local GUI
    hazard               = [climada_global.data_dir filesep 'hazards' filesep '*.mat'];
    [filename, pathname] = uigetfile(hazard, 'Open existing hazard event set:');
    if isequal(filename,0) || isequal(pathname,0)
        return; % cancel
    else
        hazard = fullfile(pathname,filename);
    end
end

% load the hazard, if a filename has been passed
if ~isstruct(hazard)
    hazard_file = hazard;hazard=[];
    load(hazard_file);
end

hazard=climada_hazard2octave(hazard); % Octave compatibility for -v7.3 mat-files

% check if based on probabilistic tc track set
if isfield(hazard,'orig_event_count')
    if length(hazard.orig_event_flag) > hazard.orig_event_count
        probabilistic = 1;
    else
        probabilistic = 0;
        fprintf('WARNING: Selected hazard does not contain probabilistic events, based only on historical data.\n')
    end
else
    fprintf('WARNING: Assuming probabilistic events (no field hazard.orig_event_count)\n')
    probabilistic = 1;
end

if isempty(peril_ID),if isfield(hazard,'peril_ID'),peril_ID=hazard.peril_ID;end;end

switch peril_ID
    case 'TC'
        intensity_threshold = 5;
    case 'TS'
         intensity_threshold = 0.1;
    case 'TR' | 'MA'
        intensity_threshold = 100;
    otherwise
        intensity_threshold = 0;
end

if isfield(hazard,'orig_event_count')
    no_generated = ceil(hazard.event_count/hazard.orig_event_count); % make sure its integer
else
    fprintf('WARNING: Only probabilistic results shown\n')
    no_generated = 1; % workaround
end

% set return periods if not given
if isempty(return_periods)
    return_periods_calc = climada_global.DFC_return_periods;
    return_periods_show = [1 5 10 20 50 100 250 500 1000]; % hard-wired
else
    return_periods_calc = return_periods;
    return_periods_show = return_periods;
end

% check if statistics are already in hazard structure
if ~isfield(hazard,'R')
    calc = 1;
elseif ~all(ismember(return_periods_show,hazard.R_fit))
    calc = 1;
else
    fprintf('Intensity data already calculated for %d\n', return_periods_show)
    calc = 0;
end

if calc
    fprintf('Calculate statistics...\n')
    
    % probabilistic
    hazard.intensity_sort     = sort(hazard.intensity,'descend');
    % historical
    hazard.intensity_ori_sort = sort(hazard.intensity(1:no_generated:end,:),'descend');
    
    hazard.R            = 1./cumsum(hazard.frequency);
    hazard.R_ori        = 1./cumsum(hazard.frequency(1:no_generated:end)*no_generated);
    
    %  decide for specific return periods, and calculate according intensity
    %  in original and probabilist events, add the following fields to hazard
    %   .intensity_fit_ori
    %   .R_fit_ori
    %   .intensity_fit
    %   .R_fit
    n_centroids              = size(hazard.intensity,2);
    hazard.intensity_fit_ori = spalloc(length(return_periods_calc),length(hazard.centroid_ID),ceil(length(return_periods_calc)*length(hazard.centroid_ID)*0.01));
    hazard.intensity_fit     = spalloc(length(return_periods_calc),length(hazard.centroid_ID),ceil(length(return_periods_calc)*length(hazard.centroid_ID)*0.01));
    hazard.R_fit             = return_periods_calc;
    
    t0       = clock;
    mod_step = 10; % first time estimate after 10 tracks, then every 100
    msgstr   = sprintf('processing %i centroids',n_centroids);
    if climada_global.waitbar
        fprintf('%s (updating waitbar with estimation of time remaining every 100th event)\n',msgstr);
        h        = waitbar(0,msgstr);
        set(h,'Name','Event loop');
    else
        fprintf('%s (waitbar suppressed)\n',msgstr);
        format_str='%s';
    end
    
    for centroid_i = 1:n_centroids
        
        if no_generated>1 % only if historic differs from probabilistic
            
            % historical data
            % ---------------
            
            [intensity_pos, ind_int]   = sort(hazard.intensity(1:no_generated:end,centroid_i),'descend');
            intensity_pos              = full(intensity_pos);
            below_thresh_pos           = intensity_pos<intensity_threshold;
            intensity_pos(intensity_pos<intensity_threshold) = [];
            
            % sort frequency accordingly
            frequency2 = hazard.frequency(1:no_generated:end);
            frequency2 = frequency2(ind_int);
            frequency2(below_thresh_pos) = [];
            
            if sum(intensity_pos)
                % exceedance frequency
                freq            = cumsum(frequency2(1:length(intensity_pos))*no_generated)';
                if length(freq)>1
                    p           = polyfit(log(freq), intensity_pos, 1);
                else
                    p = zeros(2,1);
                end
                exc_freq                               = 1./return_periods_calc;
                intensity_fit                          = polyval(p, log(exc_freq));
                intensity_fit(intensity_fit<=0)        = 0; %nan;
                R                                      = 1./freq;
                neg                                    = return_periods_calc >max(R);
                intensity_fit(neg)                     = 0; %nan
                hazard.intensity_fit_ori(:,centroid_i) = intensity_fit;
            end % sum(intensity_pos)
        end % historical data
        
        % probabilistic data
        % ------------------
        
        % intensity
        [intensity_pos, ind_int]   = sort(hazard.intensity(:,centroid_i),'descend');
        intensity_pos              = full(intensity_pos);
        below_thresh_pos           = intensity_pos<intensity_threshold;
        intensity_pos(intensity_pos<intensity_threshold) = [];
        
        % sort frequency accordingly
        frequency2 = hazard.frequency;
        frequency2 = frequency2(ind_int);
        frequency2(below_thresh_pos) = [];
        
        if sum(intensity_pos)
            %exceedance frequency
            freq            = cumsum(frequency2(1:length(intensity_pos)))';
            if length(freq)>1
                p           = polyfit(log(freq), intensity_pos, 1);
            else
                p = zeros(2,1);
            end
            exc_freq      = 1./return_periods_calc;
            intensity_fit = polyval(p, log(exc_freq));
            intensity_fit(intensity_fit<=0)    = 0; %nan;
            R                                  = 1./freq;
            neg                                = return_periods_calc >max(R);
            intensity_fit(neg)                 = 0; %nan;
            hazard.intensity_fit(:,centroid_i) = intensity_fit;
        end % intensity_pos, probabilistic data
        
        if mod(centroid_i,mod_step)==0 && climada_global.waitbar
            mod_step = 100;
            t_elapsed = etime(clock,t0)/centroid_i;
            n_remaining = n_centroids-centroid_i;
            t_projected_sec = t_elapsed*n_remaining;
            if t_projected_sec<60
                msgstr = sprintf('est. %3.0f sec left (%i/%i centroids)',t_projected_sec, centroid_i, n_centroids);
            else
                msgstr = sprintf('est. %3.1f min left (%i/%i centroids)',t_projected_sec/60, centroid_i, n_centroids);
            end
            
            if climada_global.waitbar
                waitbar(centroid_i/n_centroids,h,msgstr); % update waitbar
            else
                fprintf(format_str,msgstr); % write progress to stdout
                format_str=[repmat('\b',1,length(msgstr)) '%s']; % back to begin of line
            end
        end
        
    end % centroid_i
    
    if climada_global.waitbar
        close(h) % dispose waitbar
    else
        fprintf(format_str,''); % move carriage to begin of line
    end
    
    % save hazard file with stats
    [fP,fN]=fileparts(hazard.filename);
    if ~exist(fP,'dir'),fP=[climada_global.data_dir filesep 'hazards'];end % if hazard created on another machine...
    hazard_R_file = [fP filesep fN '_R.mat'];
    fprintf('Saving hazard statics in %s\n',hazard_R_file);
    save(hazard_R_file,'hazard')
    
end % if calc


% FIGURE
% ------
if check_plot
    % some color settings
    cmap = climada_colormap(peril_ID);
    caxis_max = max(return_periods_show);
    caxis_min = min(return_periods_show);
    return_count = length(return_periods_show);
    
    [x, y] = meshgrid(unique(hazard.lon),unique(hazard.lat));
    plot_vals = zeros(size(x));
    for i=return_count:-1:1 %x_no*y_no %return_count
        if climada_global.waitbar,waitbar(i/return_count, h, msgstr);end % update waitbar
        %subaxis(i)
        
        fit_index = return_periods_show(i) == hazard.R_fit;
        values    = full(hazard.intensity_fit(fit_index,:));
        
        if ~sum(values(~isnan(values)))>intensity_threshold
            fprintf('WARNING: no data for %i year return period available \n',return_periods_show(i))
        end
        
        values = griddata(hazard.lon,hazard.lat,values,x,y);
        % contourf(x,y,values,'edgecolor', 'none')
        plot_vals(values > intensity_threshold ) = (1/return_periods_show(i));
    end
    % plot_vals(plot_vals ==0) = NaN;
    
    fig = contourf(x,y,plot_vals,200,'edgecolor','none');
    hold on
    cb = colorbar;
    ylabel(cb, '[events/year]')
    set(cb,'yticklabel',sort(1./return_periods_show,'ascend'))
    title(cb,'return frequency')
    climada_plot_world_borders(0.7)
    axis equal
    axis([min(hazard.lon) max(hazard.lon) min(hazard.lat) max(hazard.lat)])
    caxis([1/caxis_max 1/caxis_min])
    ylabel('latitude')
    xlabel('longitude')
    title('hazard impact - return frequency')
    if ~exist('cmap','var'), cmap = '';end
    if ~isempty(cmap), colormap(cmap);end
    if climada_global.waitbar,close(h);end % dispose waitbar
    
end % check_plot

return
